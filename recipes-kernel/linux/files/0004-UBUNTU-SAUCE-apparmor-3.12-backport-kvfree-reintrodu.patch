From b96004406a2d8fb28fb6d0f57b8669feb475501b Mon Sep 17 00:00:00 2001
From: Paolo Pisati <paolo.pisati@canonical.com>
Date: Tue, 13 Jan 2015 18:22:37 +0100
Subject: [PATCH 04/33] UBUNTU: SAUCE: apparmor: 3.12 backport kvfree:
 reintroduce kvfree() and vfree() helper function

Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
(cherry picked from commit 8b0067d46e7fb6018260d05168468db5484423ce)
Signed-off-by: Paolo Pisati <paolo.pisati@canonical.com>
---
 security/apparmor/include/apparmor.h |  1 +
 security/apparmor/lib.c              | 31 +++++++++++++++++++++++++++++++
 2 files changed, 32 insertions(+)

diff --git a/security/apparmor/include/apparmor.h b/security/apparmor/include/apparmor.h
index a59a330..812f0c6 100644
--- a/security/apparmor/include/apparmor.h
+++ b/security/apparmor/include/apparmor.h
@@ -89,6 +89,7 @@ char *aa_split_fqname(char *args, char **ns_name);
 char *aa_splitn_fqname(char *fqname, size_t n, char **ns_name, size_t *ns_len);
 void aa_info_message(const char *str);
 void *__aa_kvmalloc(size_t size, gfp_t flags);
+void kvfree(void *buffer);
 
 static inline void *kvmalloc(size_t size)
 {
diff --git a/security/apparmor/lib.c b/security/apparmor/lib.c
index 1f810ef..b842caf 100644
--- a/security/apparmor/lib.c
+++ b/security/apparmor/lib.c
@@ -155,6 +155,37 @@ void *__aa_kvmalloc(size_t size, gfp_t flags)
 	return buffer;
 }
 
+/**
+ * do_vfree - workqueue routine for freeing vmalloced memory
+ * @work: data to be freed
+ *
+ * The work_struct is overlaid to the data being freed, as at the point
+ * the work is scheduled the data is no longer valid, be its freeing
+ * needs to be delayed until safe.
+ */
+static void do_vfree(struct work_struct *work)
+{
+	vfree(work);
+}
+
+/**
+ * kvfree - free an allocation do by kvmalloc
+ * @buffer: buffer to free (MAYBE_NULL)
+ *
+ * Free a buffer allocated by kvmalloc
+ */
+void kvfree(void *buffer)
+{
+	if (is_vmalloc_addr(buffer)) {
+		/* Data is no longer valid so just use the allocated space
+		 * as the work_struct
+		 */
+		struct work_struct *work = (struct work_struct *) buffer;
+		INIT_WORK(work, do_vfree);
+		schedule_work(work);
+	} else
+		kfree(buffer);
+}
 
 __counted char *aa_str_alloc(int size, gfp_t gfp)
 {
-- 
2.7.4

